generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WorkLocation {
  ONSITE
  HYBRID
  REMOTE
}

enum InterviewType {
  FINAL_ROUND
  ON_SITE
  TECHNICAL
  PANEL
  PHONE_SCREEN
  ASSESSMENT
  INTERVIEW
  VIDEO_INTERVIEW
  FOLLOW_UP
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum RejectionInitiator {
  APPLICANT
  COMPANY
}

enum UserType {
  CLIENT
  CANDIDATE
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
  recipient User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Job {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String            @db.ObjectId
  referral  Boolean?
  company      String
  description  String
  title        String
  industry     String?
  location     String?
  workLocation WorkLocation?
  postUrl      String 
  salary       String?
  status       ApplicationStatus?
  interviews   Interview[]
  offer        Offer[]
  rejection    Rejection[]
  jobSkills    JobSkill[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("job")
}

model JobSkill {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String   @db.ObjectId
  skill      String
  isRequired Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("job_skill")
}

model Interview {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?          @db.ObjectId
  job             Job              @relation(fields: [jobId], references: [id])
  jobId           String           @db.ObjectId
  acceptedDate    DateTime
  interviewDate   DateTime
  interviewType InterviewType 
  
  @@map("interview")
}

model Offer {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
  job          Job         @relation(fields: [jobId], references: [id])
  jobId        String      @db.ObjectId
  offerDate    DateTime
  offerDeadline DateTime?
  salary       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("offer")
}

model Rejection {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  user        User?              @relation(fields: [userId], references: [id])
  userId      String?            @db.ObjectId
  job         Job?               @relation(fields: [jobId], references: [id])
  jobId       String?            @db.ObjectId
  date        DateTime?
  initiatedBy RejectionInitiator
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("rejection")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userType     String?  

  @@map("session")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          String?
  userType      UserType?
  skills        String[]
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  offers        Offer[]
  interviews    Interview[]
  rejections    Rejection[]
  messagesSent  Message[]   @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
