generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WorkLocation {
  ONSITE
  HYBRID
  REMOTE
}

enum InterviewType {
  FINAL_ROUND
  ON_SITE
  TECHNICAL
  PANEL
  PHONE_SCREEN
  ASSESSMENT
  INTERVIEW
  VIDEO_INTERVIEW
  FOLLOW_UP
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum RejectionInitiator {
  APPLICANT
  COMPANY
}

enum UserType {
  CLIENT
  CANDIDATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
}

enum JobPostingStatus {
  OPEN
  CLOSED
  FILLED
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
  STAFF
  PRINCIPAL
}

enum YearsOfExperience {
  LESS_THAN_1_YEAR
  ONE_YEAR
  TWO_YEARS
  THREE_YEARS
  FOUR_YEARS
  FIVE_YEARS
  SIX_YEARS
  SEVEN_YEARS
  EIGHT_YEARS
  NINE_YEARS
  TEN_YEARS
  TEN_PLUS_YEARS
}

enum Availability {
  IMMEDIATELY
  WITHIN_ONE_WEEK
  WITHIN_TWO_WEEKS
  ONE_MONTH
  NEGOTIABLE
}

enum ProjectType {
  PERSONAL
  FREELANCE
  ACADEMIC
  CLIENT
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

model Message {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  sender            User        @relation("SentMessages", fields: [senderId], references: [id])
  senderId          String      @db.ObjectId
  recipient         User        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId       String      @db.ObjectId
  content           String
  messageType       MessageType @default(TEXT)
  mentionedUserIds  String[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isReadByRecipient Boolean     @default(false)
  isDeletedBySender Boolean     @default(false)
  replyToId         String?     @db.ObjectId
  threadId          String?     @db.ObjectId
  deliveryStatus    String?
  reactionCount     Int         @default(0)
  readAt            DateTime?

  @@map("messages")
}

model JobListing {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  user                 User              @relation("JobListings", fields: [userId], references: [id], onDelete: Cascade)
  userId               String            @db.ObjectId
  company              String?
  title                String
  jobType              JobType?
  applicationDeadline  DateTime?
  experienceLevels     ExperienceLevel[]
  yearsOfExperience    Int?
  description          String
  industry             String?
  location             String?
  workLocation         WorkLocation?
  rate                 Float?
  salary               Float?
  salaryRangeMin       Float?
  salaryRangeMax       Float?
  status               JobPostingStatus  @default(OPEN)
  requiredSkills       String[]
  bonusSkills          String[]
  views                Int               @default(0)
  applications         Application[]     @relation("JobApplications")
  applicationsReceived Int               @default(0)
  isArchived           Boolean           @default(false)
  url                  String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@map("job_postings")
}

model WorkExperience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("work_experience")
}

model Project {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @db.ObjectId
  title        String
  description  String?
  url          String?
  technologies String[]
  role         String?
  startDate    DateTime?
  endDate      DateTime?
  images       String[]
  isFeatured   Boolean      @default(false)
  projectType  ProjectType?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("projects")
}

model Education {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  education      String
  graduationDate DateTime
  degree         String
  major          String
  gpa            Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("education")
}

model Application {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  candidateId  String            @db.ObjectId
  candidate    User              @relation("JobApplications", fields: [candidateId], references: [id])
  jobListingId String            @db.ObjectId
  jobListing   JobListing        @relation("JobApplications", fields: [jobListingId], references: [id])
  status       ApplicationStatus @default(APPLIED)
  appliedAt    DateTime          @default(now())

  @@map("applications")
}

model Job {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String             @db.ObjectId
  referral     Boolean?
  company      String
  description  String
  title        String
  industry     String?
  location     String?
  workLocation WorkLocation?
  postUrl      String
  salary       String?
  status       ApplicationStatus?
  interviews   Interview[]
  offer        Offer[]
  rejection    Rejection[]
  jobSkills    JobSkill[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("job")
}

model JobSkill {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String   @db.ObjectId
  skill      String
  isRequired Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("job_skill")
}

model Interview {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?       @db.ObjectId
  job           Job           @relation(fields: [jobId], references: [id])
  jobId         String        @db.ObjectId
  acceptedDate  DateTime
  interviewDate DateTime
  interviewType InterviewType

  @@map("interview")
}

model Offer {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @db.ObjectId
  job           Job       @relation(fields: [jobId], references: [id])
  jobId         String    @db.ObjectId
  offerDate     DateTime
  offerDeadline DateTime?
  salary        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("offer")
}

model Rejection {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  user        User?              @relation(fields: [userId], references: [id])
  userId      String?            @db.ObjectId
  job         Job?               @relation(fields: [jobId], references: [id])
  jobId       String?            @db.ObjectId
  date        DateTime?
  initiatedBy RejectionInitiator
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("rejection")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userType     String?

  @@map("session")
}

model User {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  bio                String?
  website            String?
  linkedin           String?
  github             String?
  twitter            String?
  role               String?
  userType           UserType?
  primaryRole        String?
  openToRoles        String[]
  yearsOfExperience  YearsOfExperience?
  skills             String[]
  availability       Availability?
  availableFrom      DateTime?
  openToWork         Boolean            @default(false)
  hiring             Boolean            @default(false)
  jobAlert           Boolean            @default(true)
  candidateAlert     Boolean            @default(true)
  lookingForMentor   Boolean            @default(false)
  offeringMentorship Boolean            @default(false)
  workExperience     WorkExperience[]
  projects           Project[]
  education          Education[]
  resume             String?
  coverLetter        String?
  certificates       String[]
  accounts           Account[]
  sessions           Session[]
  jobs               Job[]
  offers             Offer[]
  interviews         Interview[]
  rejections         Rejection[]
  applications       Application[]      @relation("JobApplications")
  JobListings        JobListing[]       @relation("JobListings")
  messagesSent       Message[]          @relation("SentMessages")
  messagesReceived   Message[]          @relation("ReceivedMessages")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
