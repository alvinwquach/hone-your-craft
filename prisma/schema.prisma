generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum CompanySize {
  Tiny_1_10
  Small_11_50
  Medium_51_200
  Large_201_500
  XLarge_501_1000
  XXLarge_1001_5000
  Enterprise_5000plus
}

enum CandidateGoal {
  ChangeMyCareer
  BuildAPortfolio
  GrowInMyExistingRole
  ExploreNewOpportunities
  ImproveSkillset
  LookingForANewJob
  ReceiveAnOffer
  NotSureYet
}

enum UserRole {
  CLIENT
  CANDIDATE
}

enum Frequency {
  PER_YEAR
  PER_MONTH
  PER_HOUR
}

enum DegreeType {
  HIGH_SCHOOL_DIPLOMA
  BACHELORS_DEGREE
  MASTERS_DEGREE
  ASSOCIATES_DEGREE
  MASTER_OF_BUSINESS_ADMINISTRATION
  DOCTOR_OF_LAW
}

enum SalaryType {
  RANGE
  STARTING_AT
  UP_TO
  EXACT
}

enum PaymentType {
  SALARY
  ONE_TIME_PAYMENT
}

enum JobApplicationStatus {
  ACCEPTED
  PENDING
  REJECTED
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum RejectionInitiator {
  APPLICANT
  COMPANY
}

enum MentorshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
  IN_PROGRESS
}

enum ExperienceLevel {
  INTERN
  TRAINEE
  JUNIOR
  ASSOCIATE
  MID
  SENIOR
  LEAD
  STAFF
  PRINCIPAL
  MANAGER
  DIRECTOR
  VP
  EXECUTIVE
  C_LEVEL
}

enum YearsOfExperience {
  LESS_THAN_1_YEAR
  ONE_YEAR
  TWO_YEARS
  THREE_YEARS
  FOUR_YEARS
  FIVE_YEARS
  SIX_YEARS
  SEVEN_YEARS
  EIGHT_YEARS
  NINE_YEARS
  TEN_YEARS
  TEN_PLUS_YEARS
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
  FREELANCE
}

enum JobPostingStatus {
  OPEN
  CLOSED
  DRAFT
  ARCHIVED
  FILLED
  COMPLETED
}

enum WorkLocation {
  ONSITE
  HYBRID
  REMOTE
}

enum Availability {
  IMMEDIATELY
  WITHIN_ONE_WEEK
  WITHIN_TWO_WEEKS
  ONE_MONTH
  NEGOTIABLE
}

enum InterviewType {
  FINAL_ROUND
  ON_SITE
  TECHNICAL
  PANEL
  PHONE_SCREEN
  ASSESSMENT
  INTERVIEW
  VIDEO_INTERVIEW
  FOLLOW_UP
  OFFER_EXTENDED
  OFFER_ACCEPTED
  OFFER_REJECTED
  REJECTION
  CONTRACT_SIGNED
  SALARY_NEGOTIATION
  FINAL_DECISION
  PRE_SCREENING
  GROUP_INTERVIEW
  REFERENCE_CHECK
  TRIAL_PERIOD
  FINAL_OFFER
  OFFER_WITHDRAWN
  NEGOTIATION_PHASE
  ADDITIONAL_DOCS_REQUIRED
  NO_SHOW
  CANDIDATE_WITHDREW
  HIRING_FREEZE
  TAKE_HOME_ASSESSMENT
}

enum ProjectType {
  PERSONAL
  FREELANCE
  ACADEMIC
  CLIENT
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  APPLICATION_UPDATE
  INTERVIEW_REMINDER
  GENERAL_ANNOUNCEMENT
  SYSTEM_ALERT
  APPLICATION_STATUS_CHANGE
  NEW_JOB_POSTING
  MESSAGE_RECEIVED
  FEEDBACK_RECEIVED
  REMINDER
  MENTORSHIP_REQUEST
  USER_ACTIVITY
  SYSTEM_UPDATE
  JOB_APPLICATION_STATUS_UPDATE
  INTERVIEW_SCHEDULED
  INTERVIEW_RESCHEDULED
  APPLICATION_FEEDBACK
  MENTORSHIP_ACCEPTED
  EVENT_REMINDER
  PROFILE_VIEW
  CONNECTION_REQUEST
  NEW_MESSAGE
  ACCOUNT_ACTIVITY_ALERT
  JOB_ALERT
  SYSTEM_MAINTENANCE
  OTHER
}

enum ConnectionStatus {
  NONE
  PENDING
  ACCEPTED
  REJECTED
}

enum Visibility {
  PUBLIC
  NETWORK_ONLY
  FRIENDS_ONLY
  COMPANY_ONLY
  SELECTED_CONNECTIONS
  ANONYMOUS
  GROUP_ONLY
  TEMPORARY
  VIEW_ONLY
  BETA_TESTERS
  SUBSCRIBERS
  HIDDEN
  CUSTOM
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

model Connection {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String           @db.ObjectId
  requester   User             @relation("ConnectionsSent", fields: [requesterId], references: [id], onDelete: Cascade)
  receiverId  String           @db.ObjectId
  receiver    User             @relation("ConnectionsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  status      ConnectionStatus @default(NONE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([requesterId, receiverId])
  @@map("connnections")
}

model Mentorship {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  mentorId  String           @db.ObjectId
  mentor    User             @relation("MentorRelationships", fields: [mentorId], references: [id])
  menteeId  String           @db.ObjectId
  mentee    User             @relation("MenteeRelationships", fields: [menteeId], references: [id])
  status    MentorshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model UserConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  conversationId String       @db.ObjectId
  user           User         @relation("UserToUserConversations", fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation("ConversationToUserConversations", fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model User {
  id                           String                        @id @default(auto()) @map("_id") @db.ObjectId
  name                         String?
  email                        String?                       @unique
  emailVerified                DateTime?
  image                        String?
  company                      String?
  headline                     String?
  bio                          String?
  website                      String?
  socialLinks                  SocialLinks?                  @relation("UserSocialLinks")
  title                        String?
  role                         String?
  userRole                     UserRole?
  primaryRole                  String?
  openToRoles                  String[]
  yearsOfExperience            YearsOfExperience?
  skills                       String[]
  status                       UserStatus?                   @relation("UserStatusRelation")
  jobAlert                     Boolean                       @default(true)
  candidateAlert               Boolean                       @default(true)
  lookingForMentor             Boolean                       @default(false)
  offeringMentorship           Boolean                       @default(false)
  mentorshipsOffered           Mentorship[]                  @relation("MentorRelationships")
  mentorshipsRequested         Mentorship[]                  @relation("MenteeRelationships")
  profileCompletion            Int                           @default(0)
  isProfilePublic              Boolean                       @default(true)
  lastActive                   DateTime?
  connectionsSent              Connection[]                  @relation("ConnectionsSent")
  connectionsReceived          Connection[]                  @relation("ConnectionsReceived")
  documents                    Document[]                    @relation("UserDocuments")
  workExperience               WorkExperience[]
  education                    Education[]
  accounts                     Account[]
  sessions                     Session[]
  jobs                         Job[]
  offers                       Offer[]
  interviews                   Interview[]
  rejections                   Rejection[]
  notifications                Notification[]
  applications                 Application[]                 @relation("JobApplications")
  jobPostings                  JobPosting[]                  @relation("JobPostings")
  messagesSent                 Message[]                     @relation("SentMessages")
  messagesReceived             Message[]                     @relation("ReceivedMessages")
  userConversations            UserConversation[]            @relation("UserToUserConversations")
  jobRecommendations           JobRecommendation[]           @relation("JobRecommendations")
  endorsementsGiven            SkillEndorsement[]            @relation("Endorser")
  endorsementsReceived         SkillEndorsement[]            @relation("Endorsees")
  collaborations               Collaboration[]               @relation("UserCollaborations")
  userAchievements             UserAchievement[]             @relation("UserAchievements")
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  interviewInvitesAsClient     InterviewInvite[]             @relation("ClientInvites")
  interviewInvitesAsCandidate  InterviewInvite[]             @relation("CandidateInvites")
  clientInterviewAvailability  ClientInterviewAvailability[] @relation("UserClientInterviewAvailability")
  jobsAppliedToDaysPerWeekGoal Int?
  weeklyStreak                 Int?                          @default(0)
  lastStreakUpdate             DateTime?
  jobsAppliedToWeeklyGoalMin   Int?
  jobsAppliedToWeeklyGoalMax   Int?
  monthlyInterviewGoal         Int?
  candidateGoal                CandidateGoal?
  offerReceivedByDateGoal      DateTime?
  offerReceivedByDateGoalStart DateTime?
  offerReceivedByDateGoalEnd   DateTime?

  @@map("users")
}

model Conversation {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  senderId          String             @db.ObjectId
  receiverIds       String[]           @db.ObjectId
  messages          Message[]          @relation("ConversationMessages")
  createdAt         DateTime           @default(now())
  userConversations UserConversation[] @relation("ConversationToUserConversations")
}

model Message {
  id                         String       @id @default(auto()) @map("_id") @db.ObjectId
  sender                     User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId                   String       @db.ObjectId
  recipients                 User         @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId                String[]     @db.ObjectId
  subject                    String?
  content                    String
  messageType                MessageType  @default(TEXT)
  mentionedUserIds           String[]
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  isReadByRecipient          Boolean      @default(false)
  isDeletedBySender          Boolean      @default(false)
  isDeletedFromTrashBySender Boolean      @default(false)
  isDeletedByRecipient       Boolean      @default(false)
  replyToId                  String?      @db.ObjectId
  threadId                   String?      @db.ObjectId
  deliveryStatus             String?
  reactionCount              Int          @default(0)
  readAt                     DateTime?
  conversationId             String       @db.ObjectId
  conversation               Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}

model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation("UserDocuments", fields: [userId], references: [id], onDelete: Cascade)
  documentType String
  name         String
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  userId           String               @db.ObjectId
  user             User                 @relation(fields: [userId], references: [id])
  message          String
  priority         NotificationPriority
  notificationType NotificationType
  redirectUrl      String?
  isRead           Boolean              @default(false)
  readAt           DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@map("notifications")
}

model JobPosting {
  id                   String                    @id @default(auto()) @map("_id") @db.ObjectId
  user                 User                      @relation("JobPostings", fields: [userId], references: [id], onDelete: Cascade)
  userId               String                    @db.ObjectId
  company              String?
  companySize          CompanySize?
  industry             String[]
  title                String
  jobType              JobType?
  url                  String?
  deadline             DateTime?
  experienceLevels     ExperienceLevel[]
  yearsOfExperience    YearsOfExperience?
  description          String
  responsibilities     String[]
  location             String?
  workLocation         WorkLocation?
  paymentType          PaymentType
  salary               Salary?                   @relation("SalaryJobPosting")
  status               JobPostingStatus          @default(OPEN)
  interviewProcess     String[]
  requiredSkills       JobPostingRequiredSkill[] @relation("RequiredJobSkills")
  bonusSkills          JobPostingBonusSkill[]    @relation("BonusJobSkills")
  requiredDegree       Degree[]                  @relation("JobPostingDegrees")
  views                Int                       @default(0)
  applications         Application[]             @relation("JobApplications")
  applicationsReceived Int                       @default(0)
  isArchived           Boolean                   @default(false)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  jobRecommendations   JobRecommendation[]       @relation("JobRecommendations")
  jobTags              JobTag[]                  @relation("JobTags")
  rejections           Rejection[]               @relation("JobRejections")
  offers               Offer[]                   @relation("JobOffers")
  interviewInvites     InterviewInvite[]         @relation("JobPostingInvites")
  directApplications   Int                       @default(0)

  @@map("job_postings")
}

model ClientInterviewAvailability {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String   @db.ObjectId
  client        User     @relation("UserClientInterviewAvailability", fields: [clientId], references: [id])
  dayOfWeek DayOfWeek
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("availabilities")
}

model TimeSlot {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  interviewInviteId String          @unique @db.ObjectId
  interviewInvite   InterviewInvite @relation("InterviewInviteToTimeSlot", fields: [interviewInviteId], references: [id])
  startTime         DateTime
  endTime           DateTime
  isBooked          Boolean         @default(false)
  bookedBy          String?         @db.ObjectId
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("timeslots")
}

model InterviewInvite {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  client        User         @relation("ClientInvites", fields: [clientId], references: [id])
  clientId      String       @db.ObjectId
  candidate     User         @relation("CandidateInvites", fields: [candidateId], references: [id])
  candidateId   String       @db.ObjectId
  jobPosting    JobPosting   @relation("JobPostingInvites", fields: [jobPostingId], references: [id])
  jobPostingId  String       @db.ObjectId
  inviteDate    DateTime     @default(now())
  interviewDate DateTime?
  timeSlotId    String?      @db.ObjectId
  timeSlot      TimeSlot?    @relation("InterviewInviteToTimeSlot")
  duration      Int?
  startTime     DateTime?
  endTime       DateTime?
  status        InviteStatus @default(PENDING)

  @@map("interview_invites")
}

model Salary {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  jobPostingId String     @unique @db.ObjectId
  jobPosting   JobPosting @relation("SalaryJobPosting", fields: [jobPostingId], references: [id], onDelete: Cascade)
  amount       Float?
  rangeMin     Float?
  rangeMax     Float?
  salaryType   SalaryType @default(RANGE)
  frequency    Frequency?
  negotiable   Boolean?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model JobTag {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  jobPosting   JobPosting @relation("JobTags", fields: [jobPostingId], references: [id])
  jobPostingId String     @db.ObjectId
  tag          Tag        @relation("JobTags", fields: [tagId], references: [id])
  tagId        String     @db.ObjectId

  @@unique([jobPostingId, tagId])
}

model Tag {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  jobTags JobTag[] @relation("JobTags")
}

model JobRecommendation {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String     @db.ObjectId
  user          User       @relation("JobRecommendations", fields: [userId], references: [id])
  jobPostingId  String     @db.ObjectId
  job           JobPosting @relation("JobRecommendations", fields: [jobPostingId], references: [id])
  recommendedAt DateTime   @default(now())
  source        String?
  rationale     String?
  isAccepted    Boolean    @default(false)
  acceptedAt    DateTime?
  rejectedAt    DateTime?
  feedback      String?
}

model JobPostingRequiredSkill {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  jobPostingId      String     @db.ObjectId
  skillId           String     @db.ObjectId
  yearsOfExperience Int
  isRequired        Boolean
  jobPosting        JobPosting @relation("RequiredJobSkills", fields: [jobPostingId], references: [id], onDelete: Cascade)
  skill             Skill      @relation("JobPostingRequiredSkillToSkill", fields: [skillId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("job_posting_required_skills")
}

model JobPostingBonusSkill {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  jobPostingId      String     @db.ObjectId
  skillId           String     @db.ObjectId
  yearsOfExperience Int?
  isRequired        Boolean    @default(false)
  jobPosting        JobPosting @relation("BonusJobSkills", fields: [jobPostingId], references: [id], onDelete: Cascade)
  skill             Skill      @relation("JobPostingBonusSkillToSkill", fields: [skillId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@map("job_posting_bonus_skills")
}

model JobSkill {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId             String   @db.ObjectId
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill             Skill    @relation("JobSkillToSkill", fields: [skillId], references: [id], onDelete: Cascade)
  skillId           String   @db.ObjectId
  isRequired        Boolean?
  yearsOfExperience Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("job_skills")
}

model Skill {
  id                       String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String                    @unique
  endorsements             SkillEndorsement[]        @relation("SkillEndorsements")
  jobSkills                JobSkill[]                @relation("JobSkillToSkill")
  jobPostingSkillsRequired JobPostingRequiredSkill[] @relation("JobPostingRequiredSkillToSkill")
  jobPostingSkillsBonus    JobPostingBonusSkill[]    @relation("JobPostingBonusSkillToSkill")
}

model SkillEndorsement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  endorserId String   @db.ObjectId
  endorser   User     @relation("Endorser", fields: [endorserId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId
  user       User     @relation("Endorsees", fields: [userId], references: [id], onDelete: Cascade)
  skillId    String   @db.ObjectId
  skill      Skill    @relation("SkillEndorsements", fields: [skillId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([endorserId, userId, skillId])
  @@map("skill_endorsements")
}

model Degree {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  degreeType   DegreeType
  jobPosting   JobPosting @relation("JobPostingDegrees", fields: [jobPostingId], references: [id], onDelete: Cascade)
  jobPostingId String     @db.ObjectId
  isRequired   Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("degrees")
}

model WorkExperience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String?
  // projects    Project[] @relation("ProjectWorkExperience")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("work_experience")
}

// model Project {
//   id               String          @id @default(auto()) @map("_id") @db.ObjectId
//   user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId           String          @db.ObjectId
//   title            String
//   description      String?
//   url              String?
//   technologies     String[]
//   role             String?
//   startDate        DateTime?
//   endDate          DateTime?
//   images           String[]
//   isFeatured       Boolean         @default(false)
//   projectType      ProjectType?
//   createdAt        DateTime        @default(now())
//   updatedAt        DateTime        @updatedAt
//   workExperience   WorkExperience? @relation("ProjectWorkExperience", fields: [workExperienceId], references: [id])
//   workExperienceId String?         @db.ObjectId
//   education        Education?      @relation("ProjectEducation", fields: [educationId], references: [id])
//   educationId      String?         @db.ObjectId
//   collaborations   Collaboration[] @relation("ProjectCollaborations")

//   @@map("projects")
// }

model Collaboration {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String   @db.ObjectId
  // project        Project  @relation("ProjectCollaborations", fields: [projectId], references: [id])
  collaboratorId String   @db.ObjectId
  collaborator   User     @relation("UserCollaborations", fields: [collaboratorId], references: [id])
  role           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Education {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  school         String
  majors         String[]
  minor          String?
  startDateMonth Int?
  startDateYear  Int?
  endDateMonth   Int?
  endDateYear    Int?
  gpa            Float?
  activities     String?
  societies      String?
  description    String?
  // projects       Project[] @relation("ProjectEducation")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("education")
}

model Application {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  candidateId  String               @db.ObjectId
  candidate    User                 @relation("JobApplications", fields: [candidateId], references: [id])
  jobPostingId String               @db.ObjectId
  jobPosting   JobPosting           @relation("JobApplications", fields: [jobPostingId], references: [id])
  status       JobApplicationStatus @default(PENDING)
  appliedAt    DateTime             @default(now())
  acceptedAt   DateTime?
  rejectedAt   DateTime?
  stages       ApplicationStage[]   @relation("ApplicationStages")
  resumeUrl    String?

  @@map("applications")
}

model ApplicationStage {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  applicationId String            @db.ObjectId
  application   Application       @relation("ApplicationStages", fields: [applicationId], references: [id], onDelete: Cascade)
  stage         ApplicationStatus
  description   String?
  attachments   String[]
  notes         String?
  updatedAt     DateTime          @updatedAt
  createdAt     DateTime          @default(now())

  @@index([applicationId])
}

model Job {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String             @db.ObjectId
  referral     Boolean?
  company      String
  description  String
  title        String
  industry     String?
  location     String?
  workLocation WorkLocation?
  postUrl      String
  salary       String?
  status       ApplicationStatus?
  interviews   Interview[]
  offer        Offer[]
  rejection    Rejection[]
  jobSkills    JobSkill[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("job")
}

model Interview {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?       @db.ObjectId
  job           Job           @relation(fields: [jobId], references: [id])
  jobId         String        @db.ObjectId
  acceptedDate  DateTime      @default(now())
  startTime     DateTime?
  endTime       DateTime?
  interviewDate DateTime?
  interviewType InterviewType

  @@map("interview")
}

model Offer {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?     @db.ObjectId
  job           Job         @relation(fields: [jobId], references: [id])
  jobId         String      @db.ObjectId
  jobPostingId  String?     @db.ObjectId
  jobPosting    JobPosting? @relation("JobOffers", fields: [jobPostingId], references: [id])
  offerDate     DateTime
  offerDeadline DateTime?
  salary        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("offer")
}

model Rejection {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  user         User?              @relation(fields: [userId], references: [id])
  userId       String?            @db.ObjectId
  job          Job?               @relation(fields: [jobId], references: [id])
  jobId        String?            @db.ObjectId
  jobPostingId String?            @db.ObjectId
  jobPosting   JobPosting?        @relation("JobRejections", fields: [jobPostingId], references: [id])
  date         DateTime?
  initiatedBy  RejectionInitiator
  notes        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("rejection")
}

model UserStatus {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  userId               String        @unique @db.ObjectId
  user                 User          @relation("UserStatusRelation", fields: [userId], references: [id], onDelete: Cascade)
  availability         Availability?
  availableFrom        DateTime?
  openToWork           Boolean       @default(false)
  openToWorkVisibility Visibility    @default(PUBLIC)
  hiring               Boolean       @default(false)
  hiringVisibility     Visibility    @default(PUBLIC)
  readyToInterview     Boolean       @default(false)
  openToOffers         Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model SocialLinks {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  userId           String  @unique @db.ObjectId
  user             User    @relation("UserSocialLinks", fields: [userId], references: [id])
  linkedinUrl      String?
  githubUrl        String?
  twitterUrl       String?
  facebookUrl      String?
  instagramUrl     String?
  youtubeUrl       String?
  tiktokUrl        String?
  pinterestUrl     String?
  redditUrl        String?
  snapchatUrl      String?
  mediumUrl        String?
  stackOverflowUrl String?
  behanceUrl       String?
}

model Achievement {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  name             String               @unique
  description      String
  iconUrl          String?
  userAchievements UserAchievement[]    @relation("AchievementUserAchievements")
  triggers         AchievementTrigger[] @relation("AchievementTriggers")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model AchievementTrigger {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  achievementId String      @db.ObjectId
  achievement   Achievement @relation("AchievementTriggers", fields: [achievementId], references: [id], onDelete: Cascade)
  condition     String
  action        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model UserAchievement {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  achievementId String      @db.ObjectId
  achievement   Achievement @relation("AchievementUserAchievements", fields: [achievementId], references: [id], onDelete: Cascade)
  awardedAt     DateTime    @default(now())
  progress      Int         @default(0)
  lastActionAt  DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userRole     String?

  @@map("session")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
