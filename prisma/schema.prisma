generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WorkLocation {
  ONSITE
  HYBRID
  REMOTE
}

enum JobTitle {
  BACK_END_DEVELOPER
  BACK_END_ENGINEER
  FRONT_END_DEVELOPER
  FRONT_END_ENGINEER
  FULL_STACK_DEVELOPER
  FULL_STACK_ENGINEER
  SOFTWARE_ENGINEER
  QA_ENGINEER
  TECHNICAL_WRITER
  DATA_SCIENTIST
  MACHINE_LEARNING_ENGINEER
  SECURITY_ENGINEER
  DATA_ENGINEER
  EMBEDDED_ENGINEER
  SOFTWARE_ARCHITECT
  WEB_DEVELOPER
  MOBILE_DEVELOPER
  IOS_DEVELOPER
  ANDROID_DEVELOPER
  GAME_ENGINEER
  SUPPORT_ENGINEER
  RESEARCH_ENGINEER
  HARDWARE_ENGINEER
  IT_SUPPORT
  MECHANICAL_ENGINEER
  SYSTEMS_ENGINEER
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEWING
  OFFER
  REJECTED
}

enum RoundOutcome {
  PASS
  FAIL
  PENDING
}

enum RejectionInitiator {
  APPLICANT
  COMPANY
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model Job {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  company              String
  description          String
  jobTitle             JobTitle
  industry             String
  location             String
  workLocation         WorkLocation
  postUrl              String
  salary               String
  status               ApplicationStatus?
  interviews           Interview[]
  offer                Offer[]
  rejection            Rejection[]
  jobSkills            JobSkill[]        
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@map("job")
}

model JobSkill {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String   @db.ObjectId
  skill      String   
  isRequired Boolean  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("job_skill")
}

model Interview {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?          @db.ObjectId
  job             Job              @relation(fields: [jobId], references: [id])
  jobId           String           @db.ObjectId
  acceptedDate    DateTime
  interviewDate   DateTime
  interviewRounds InterviewRound[]

  @@map("interview")
}

model InterviewRound {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  interviewId String        @db.ObjectId
  interview   Interview     @relation(fields: [interviewId], references: [id])
  roundNumber Int
  notes       String?
  outcome     RoundOutcome?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("interview_round")
}

model Offer {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
  job          Job         @relation(fields: [jobId], references: [id])
  jobId        String      @db.ObjectId
  offerDate    DateTime
  acceptedDate DateTime?
  salary       String
  notes        String
  status       OfferStatus
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("offer")
}

model Rejection {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  user        User?              @relation(fields: [userId], references: [id])
  userId      String?            @db.ObjectId
  job         Job?               @relation(fields: [jobId], references: [id])
  jobId       String?            @db.ObjectId
  date        DateTime
  initiatedBy RejectionInitiator
  notes       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rejection")
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  offers         Offer[]
  interviews     Interview[]
  rejections     Rejection[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
