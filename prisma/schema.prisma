generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum WorkLocation {
  ONSITE
  HYBRID
  REMOTE
}

enum InterviewType {
  FINAL_ROUND
  ON_SITE
  TECHNICAL
  PANEL
  PHONE_SCREEN
  ASSESSMENT
  INTERVIEW
  VIDEO_INTERVIEW
  FOLLOW_UP
}

enum ApplicationStatus {
  SAVED
  APPLIED
  INTERVIEW
  OFFER
  REJECTED
}

enum RejectionInitiator {
  APPLICANT
  COMPANY
}

enum UserType {
  CLIENT
  CANDIDATE
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
}

enum JobPostingStatus {
  OPEN
  CLOSED
  FILLED
}

enum ExperienceLevel {
  JUNIOR
  MID
  SENIOR
  STAFF
  PRINCIPAL
}

enum YearsOfExperience {
  LESS_THAN_1_YEAR
  ONE_YEAR
  TWO_YEARS
  THREE_YEARS
  FOUR_YEARS
  FIVE_YEARS
  SIX_YEARS
  SEVEN_YEARS
  EIGHT_YEARS
  NINE_YEARS
  TEN_YEARS
  TEN_PLUS_YEARS
}

enum Availability {
  IMMEDIATELY
  WITHIN_ONE_WEEK
  WITHIN_TWO_WEEKS
  ONE_MONTH
  NEGOTIABLE
}

enum ProjectType {
  PERSONAL
  FREELANCE
  ACADEMIC
  CLIENT
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum NotificationType {
  APPLICATION_UPDATE
  INTERVIEW_REMINDER
  GENERAL_ANNOUNCEMENT
  SYSTEM_ALERT
  APPLICATION_STATUS_CHANGE
  NEW_JOB_LISTING
  MESSAGE_RECEIVED
  FEEDBACK_RECEIVED
  REMINDER
  MENTORSHIP_REQUEST
  USER_ACTIVITY
  SYSTEM_UPDATE
  JOB_APPLICATION_STATUS_UPDATE
  INTERVIEW_SCHEDULED
  INTERVIEW_RESCHEDULED
  APPLICATION_FEEDBACK
  MENTORSHIP_ACCEPTED
  EVENT_REMINDER
  PROFILE_VIEW
  CONNECTION_REQUEST
  NEW_MESSAGE
  ACCOUNT_ACTIVITY_ALERT
  JOB_ALERT
  SYSTEM_MAINTENANCE
  OTHER
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Visibility {
  PUBLIC
  NETWORK_ONLY
  FRIENDS_ONLY
  COMPANY_ONLY
  SELECTED_CONNECTIONS
  ANONYMOUS
  GROUP_ONLY
  TEMPORARY
  VIEW_ONLY
  BETA_TESTERS
  SUBSCRIBERS
  HIDDEN
  CUSTOM
}

model Connection {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String           @db.ObjectId
  requester   User             @relation("ConnectionsSent", fields: [requesterId], references: [id], onDelete: Cascade)
  receiverId  String           @db.ObjectId
  receiver    User             @relation("ConnectionsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([requesterId, receiverId])
}

model Message {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  sender            User        @relation("SentMessages", fields: [senderId], references: [id])
  senderId          String      @db.ObjectId
  recipient         User        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId       String      @db.ObjectId
  content           String
  messageType       MessageType @default(TEXT)
  mentionedUserIds  String[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isReadByRecipient Boolean     @default(false)
  isDeletedBySender Boolean     @default(false)
  replyToId         String?     @db.ObjectId
  threadId          String?     @db.ObjectId
  deliveryStatus    String?
  reactionCount     Int         @default(0)
  readAt            DateTime?

  @@map("messages")
}

model Document {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation("UserDocuments", fields: [userId], references: [id], onDelete: Cascade)
  documentType String
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  userId           String               @db.ObjectId
  user             User                 @relation(fields: [userId], references: [id])
  message          String
  priority         NotificationPriority
  notificationType NotificationType
  redirectUrl      String?
  isRead           Boolean              @default(false)
  readAt           DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  @@map("notifications")
}

model JobListing {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  user                 User                @relation("JobListings", fields: [userId], references: [id], onDelete: Cascade)
  userId               String              @db.ObjectId
  company              String?
  title                String
  jobType              JobType?
  applicationDeadline  DateTime?
  experienceLevels     ExperienceLevel[]
  yearsOfExperience    Int?
  description          String
  industry             String?
  location             String?
  workLocation         WorkLocation?
  rate                 Float?
  salary               Float?
  salaryRangeMin       Float?
  salaryRangeMax       Float?
  status               JobPostingStatus    @default(OPEN)
  requiredSkills       String[]
  bonusSkills          String[]
  views                Int                 @default(0)
  applications         Application[]       @relation("JobApplications")
  applicationsReceived Int                 @default(0)
  isArchived           Boolean             @default(false)
  url                  String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  jobRecommendations   JobRecommendation[] @relation("JobRecommendations")

  @@map("job_postings")
}

model JobRecommendation {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  userId        String     @db.ObjectId
  user          User       @relation("JobRecommendations", fields: [userId], references: [id])
  jobId         String     @db.ObjectId
  job           JobListing @relation("JobRecommendations", fields: [jobId], references: [id])
  recommendedAt DateTime   @default(now())
  source        String?
  rationale     String?
  isAccepted    Boolean    @default(false)
  acceptedAt    DateTime?
  rejectedAt    DateTime?
  feedback      String?
}

model WorkExperience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("work_experience")
}

model Project {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @db.ObjectId
  title        String
  description  String?
  url          String?
  technologies String[]
  role         String?
  startDate    DateTime?
  endDate      DateTime?
  images       String[]
  isFeatured   Boolean      @default(false)
  projectType  ProjectType?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("projects")
}

model Education {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  education      String
  graduationDate DateTime
  degree         String
  major          String
  gpa            Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("education")
}

model Application {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  candidateId  String            @db.ObjectId
  candidate    User              @relation("JobApplications", fields: [candidateId], references: [id])
  jobListingId String            @db.ObjectId
  jobListing   JobListing        @relation("JobApplications", fields: [jobListingId], references: [id])
  status       ApplicationStatus @default(APPLIED)
  appliedAt    DateTime          @default(now())

  @@map("applications")
}

model Job {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String             @db.ObjectId
  referral     Boolean?
  company      String
  description  String
  title        String
  industry     String?
  location     String?
  workLocation WorkLocation?
  postUrl      String
  salary       String?
  status       ApplicationStatus?
  interviews   Interview[]
  offer        Offer[]
  rejection    Rejection[]
  jobSkills    JobSkill[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("job")
}

model JobSkill {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  job        Job      @relation(fields: [jobId], references: [id])
  jobId      String   @db.ObjectId
  skill      String
  isRequired Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("job_skill")
}

model Skill {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String             @unique
  endorsements   SkillEndorsement[] @relation("SkillEndorsements")
}


model SkillEndorsement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  endorserId String   @db.ObjectId 
  endorser   User     @relation("Endorser", fields: [endorserId], references: [id], onDelete: Cascade)
  userId     String   @db.ObjectId 
  user       User     @relation("Endorsees", fields: [userId], references: [id], onDelete: Cascade)
  skillId    String   @db.ObjectId 
  skill      Skill    @relation("SkillEndorsements", fields: [skillId], references: [id]) 
  createdAt  DateTime @default(now())

  @@unique([endorserId, userId, skillId]) 
  @@map("skill_endorsements")
}


model Interview {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?       @db.ObjectId
  job           Job           @relation(fields: [jobId], references: [id])
  jobId         String        @db.ObjectId
  acceptedDate  DateTime
  interviewDate DateTime
  interviewType InterviewType

  @@map("interview")
}

model Offer {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?   @db.ObjectId
  job           Job       @relation(fields: [jobId], references: [id])
  jobId         String    @db.ObjectId
  offerDate     DateTime
  offerDeadline DateTime?
  salary        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("offer")
}

model Rejection {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  user        User?              @relation(fields: [userId], references: [id])
  userId      String?            @db.ObjectId
  job         Job?               @relation(fields: [jobId], references: [id])
  jobId       String?            @db.ObjectId
  date        DateTime?
  initiatedBy RejectionInitiator
  notes       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@map("rejection")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String?  @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userType     String?

  @@map("session")
}

model User {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?            @unique
  emailVerified        DateTime?
  image                String?
  bio                  String?
  website              String?
  linkedin             String?
  github               String?
  twitter              String?
  facebook             String?
  instagram            String?
  youtube              String?
  role                 String?
  userType             UserType?
  primaryRole          String?
  openToRoles          String[]
  yearsOfExperience    YearsOfExperience?
  skills               String[]
  availability         Availability?
  availableFrom        DateTime?
  openToWork           Boolean            @default(false)
  openToWorkVisibility Visibility         @default(PUBLIC)
  hiring               Boolean            @default(false)
  hiringVisibility     Visibility         @default(PUBLIC)
  jobAlert             Boolean            @default(true)
  candidateAlert       Boolean            @default(true)
  lookingForMentor     Boolean            @default(false)
  offeringMentorship    Boolean           @default(false)
  preferredLanguages   String[]
  timezone             String?
  profileCompletion    Int                 @default(0)
  isProfilePublic      Boolean             @default(true)
  lastActive           DateTime?
  connectionsSent      Connection[]        @relation("ConnectionsSent")
  connectionsReceived   Connection[]       @relation("ConnectionsReceived")
  documents           Document[]          @relation("UserDocuments")
  workExperience      WorkExperience[]
  projects            Project[]
  education           Education[]
  resume              String?
  coverLetter         String?
  certificates        String[]
  accounts            Account[]
  sessions            Session[]
  jobs                Job[]
  offers              Offer[]
  interviews          Interview[]
  rejections          Rejection[]
  notifications       Notification[]
  applications        Application[]       @relation("JobApplications")
  JobListings         JobListing[]       @relation("JobListings")
  messagesSent        Message[]           @relation("SentMessages")
  messagesReceived    Message[]           @relation("ReceivedMessages")
  jobRecommendations   JobRecommendation[] @relation("JobRecommendations")
  endorsementsGiven    SkillEndorsement[] @relation("Endorser")
  endorsementsReceived  SkillEndorsement[] @relation("Endorsees")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}


model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
